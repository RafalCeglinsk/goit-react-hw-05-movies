{"version":3,"file":"static/js/613.7dc5f42f.chunk.js","mappings":"gLAmEA,QA9DA,WACE,MAAMA,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAWnD,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQF,SAAC,mBACvBD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,SACEC,UAAU,cACVC,KAAK,OACLC,MAAOV,EACPW,SAAUC,GAAKX,EAASW,EAAEC,OAAOH,OACjCI,YAAY,4BAEdP,EAAAA,EAAAA,KAAA,UAAQQ,QApBOC,UACnB,IACE,MAAMC,OCRoBD,WAC9B,MACME,EAAe,IAAIC,gBAAgB,CACvCnB,MAAOA,EACPoB,QANY,mCAOZC,SAAU,UAEZ,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,IAAU,GAADC,OAPtB,4CAO6B,KAAAA,OAAIN,IAE3C,aADmBI,EAASL,IAI9B,CAFE,MAAOQ,GACPC,QAAQD,MAAM,8BAA+BA,EAC/C,GDLuBE,CAAiB3B,GACpCI,EAAiBa,EAAKW,QAGxB,CAFE,MAAOH,GACPC,QAAQD,MAAM,yBAA0BA,EAC1C,GAcmCjB,UAAU,eAAcF,SAAC,YAGxDC,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CACHC,GAAIhC,EAASiC,MAAMC,KACnBD,MAAO,CAAEC,KAAMlC,EAAUmC,QAASnC,EAASiC,MAAME,SACjDzB,UAAU,iBAAgBF,SAC3B,gBAKHC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWF,SACtBH,EAAc+B,KAAIC,IACjB9B,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACG,KACDC,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CACHC,GAAE,WAAAN,OAAaW,EAAMC,IACrBL,MAAO,CAAEC,KAAMlC,EAAUmC,QAASE,EAAMC,IAAK9B,UAE7CC,EAAAA,EAAAA,KAAA,OACEC,UAAU,eACV6B,IACEF,EAAMG,YAAW,mCAAAd,OACsBW,EAAMG,aACzC,oGAENC,IAAKJ,EAAMK,YAbRL,EAAMC,UAqBzB,C","sources":["components/Movies/Movies.jsx","api/getMoviesByQuery.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { getMoviesByQuery } from 'api/getMoviesByQuery';\n\nfunction Movies() {\n  const location = useLocation();\n  const [query, setQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearch = async () => {\n    try {\n      const data = await getMoviesByQuery(query);\n      setSearchResults(data.results);\n    } catch (error) {\n      console.error('Error searching movies', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2 className=\"Tittle\">Search Movies</h2>\n      <div className=\"InputContainer\">\n        <input\n          className=\"MoviesInput\"\n          type=\"text\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          placeholder=\"Enter a movie title...\"\n        />\n        <button onClick={handleSearch} className=\"SearchButton\">\n          Search\n        </button>\n        <Link\n          to={location.state.from}\n          state={{ from: location, movieId: location.state.movieId }}\n          className=\"MoviesBackLink\"\n        >\n          Go back\n        </Link>\n      </div>\n\n      <ul className=\"MovieList\">\n        {searchResults.map(movie => (\n          <li key={movie.id}>\n            {' '}\n            <Link\n              to={`/movies/${movie.id}`}\n              state={{ from: location, movieId: movie.id }}\n            >\n              <img\n                className=\"MovieListImg\"\n                src={\n                  movie.poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n                    : 'https://d32qys9a6wm9no.cloudfront.net/images/others/not_available/poster_500x735.png?t=1699920683'\n                }\n                alt={movie.title}\n              />\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'c065ab5e538040cab742d0cd9aa41895';\n\nexport const getMoviesByQuery = async query => {\n  const URL = 'https://api.themoviedb.org/3/search/movie';\n  const searchParams = new URLSearchParams({\n    query: query,\n    api_key: API_KEY,\n    language: 'en-US',\n  });\n  try {\n    const response = await axios.get(`${URL}?${searchParams}`);\n    const data = await response.data;\n    return data;\n  } catch (error) {\n    console.error('Error while fetching movies', error);\n  }\n};\n"],"names":["location","useLocation","query","setQuery","useState","searchResults","setSearchResults","_jsxs","children","_jsx","className","type","value","onChange","e","target","placeholder","onClick","async","data","searchParams","URLSearchParams","api_key","language","response","axios","concat","error","console","getMoviesByQuery","results","Link","to","state","from","movieId","map","movie","id","src","poster_path","alt","title"],"sourceRoot":""}